// Code generated by go-bindata.
// sources:
// config.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xe6\xe5\x52\x50\x50\x4a\x49\x2c\x49\xf4\xcc\x4b\xcb\x57\xb2\x52\x88\x06\x09\x28\x28\x54\x43\x28\x05\x05\xa5\xd4\xbc\xc4\xa4\x9c\x54\x25\x2b\x85\xb4\xc4\x9c\xe2\x54\x1d\xb8\x78\x65\x6a\x62\x91\x92\x95\x82\x52\x4e\x62\x71\x89\x12\x42\xb8\xb4\x28\x07\x24\x9a\x51\x52\x52\x60\xa5\xaf\x5f\x5e\x5e\xae\x97\x97\x99\x96\x92\xac\x97\x5f\x94\xae\x97\x9c\xa7\xef\xec\x63\x60\x68\x60\xa1\xaf\x04\x51\x5f\xab\x83\xd3\xb6\x92\xa2\x52\x2c\x96\x19\x19\x18\x9a\x93\x64\x99\x85\xb9\x31\x11\x96\xe1\xf0\x9a\x91\x81\xa1\x19\x69\xb6\x19\x1b\xeb\x23\x69\x48\xad\x28\x49\xcd\x4b\xf1\x2c\x49\xcd\x2d\x46\x84\x2c\x8a\x13\xc0\xca\x4a\x32\x4b\xc0\xae\x50\x7a\x3e\x65\xfe\xf3\xce\x95\x4f\x3b\xb6\x3d\x9d\xdc\xf8\xac\x73\xe7\xf3\xb5\xfb\x9e\xf6\x4f\x7c\xb2\x6b\x39\x88\xdb\xdc\xfa\xb4\x6d\xeb\xb3\x8d\xed\xcf\x1a\x76\xbf\xdf\xd3\xf1\xb4\x75\xcd\xf3\x25\xbb\xde\xef\xe9\x7c\xb1\x70\xc5\xfb\x3d\x1d\x20\x87\x3e\xdd\xb9\xc5\xd0\xe8\xd9\x9c\x0e\xc3\x67\xd3\x97\xbe\x68\xdf\x0c\x61\x9b\x3e\x9b\xbe\xf4\xfd\x9e\x4e\x84\x9b\x48\x08\x36\x4b\x03\x13\x0b\xbd\x8c\x92\xdc\x1c\x25\x84\xe6\x5a\x1d\x3a\x79\xc2\x0c\xc9\x17\xc6\x86\x14\xf9\xc2\xc2\x04\xc3\x17\x30\x66\x2c\x05\x29\xc3\x94\xa4\x94\x61\x6e\x69\x44\x51\x3a\x34\x21\xcd\x36\x63\x73\x8a\x6c\x33\x26\xc9\x36\x13\x23\x44\x86\x06\x51\xb1\xbc\x5c\xb5\x80\x00\x00\x00\xff\xff\x6d\x18\x89\xdc\x58\x04\x00\x00")

func configJsonBytes() ([]byte, error) {
	return bindataRead(
		_configJson,
		"config.json",
	)
}

func configJson() (*asset, error) {
	bytes, err := configJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.json", size: 1112, mode: os.FileMode(438), modTime: time.Unix(1506946758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.json": configJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.json": &bintree{configJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

